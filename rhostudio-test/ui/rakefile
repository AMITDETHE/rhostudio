require './common/common'
require './common/jake'

namespace "autotest" do

namespace "ui" do

  def changeConfigToActualPath(configPath, path)
    puts 'configPath-' + configPath
    puts 'path-' + path

    config    = File.readlines(configPath)
    configOut = File.new(configPath, 'w+')

    config.each do |line| 
       if line.include?('<Prp name="filepath" type="S" value="')       
         configOut.puts '							<Prp name="filepath" type="S" value="' + path + '"/>'
       else
         configOut.puts line
       end 
    end

    configOut.close
  end
 
  task :config => ["autotest:config"] do
  end

  def decorateQutes(path)
    return '"' + path + '"'
  end

  def getTestsList
    chdir File.join(File.dirname(__FILE__), "RhoStudio", "RhoStudio", "KeywordTests")

    filesList = Dir.glob("*.tcKDTest")
    testsList = Array.new

    filesList.each { |file|
      parts = file.to_s.split('.')
      testsList << parts[0]
    }

    chdir File.dirname(__FILE__)
    return testsList
  end

  def runTestComplete(project, test)
    chdir File.dirname(__FILE__)

    pathToTestComplProject = File.join(Dir.pwd, "RhoStudio", "RhoStudio.pjs")
    reportFile             = 'report.mht'

    pathToTestComplProject.gsub!('/', '\\')

    cmdLine = decorateQutes($config['paths']['testcomplete'])
    cmdLine += " "
    cmdLine += pathToTestComplProject 
    cmdLine += " "
    cmdLine += '/r'
    cmdLine += " "
    cmdLine += '/e'
    cmdLine += " "
    cmdLine += '/project:' + project
    cmdLine += " "
    cmdLine += '/test:' + decorateQutes('KeywordTests|' + test)
    #cmdLine += " "
    #cmdLine += '/exportlog:' + reportFile
    cmdLine += " "
    cmdLine += '/ns'

    return Jake.run(cmdLine)
  end

  def removeRhostudioWs
    wsDir = $config['paths']['rhostudio_ws']
    rm_rf wsDir 
  end

  def runTest(testName)
    chdir File.dirname(__FILE__)

    configFilePath  = File.absolute_path(File.join(".", "RhoStudio", "RhoStudio", "TestedApps", "TestedApps.tcTAs"))
    suiteActualPath = File.join(getRhostudioSuitePath, "rhostudio", "win32.win32.x86")

    changeConfigToActualPath(configFilePath, suiteActualPath)

    projectName = "RhoStudio"
    testsNames  = getTestsList
    testResult = false

    removeRhostudioWs
    sleep(5)
    testResult = runTestComplete(projectName, testName)   
    killProgram('RhoStudio*')
    killProgram('RhoSimulator*')

    return testResult
  end

  task :run_once => ["autotest:ui:config"] do
    $testResult = runTest(ENV['test'])

    if $testResult == false
      puts 'Test ' + testName + ' was broken'
      exit 1
    else
      puts 'Test ' + testName + ' was successfuly finished'
      exit 0
    end
  end

  task :run => ["autotest:ui:config"] do
    testsNames  = getTestsList
    $testResult = false

    testsNames.each { |testName|
      $testResult = runTest(testName)

      if $testResult == false
        puts 'Test ' + testName + ' was broken'
      else
        puts 'Test ' + testName + ' was successfully finished'
      end
    }

    if $testResult == false
      exit 1
    end
  end

end #end of 'ui'

end #end of 'autotest'